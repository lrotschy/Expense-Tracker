#! /usr/bin/env ruby
require 'pg'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    result.each do |tuple|
      columns = [
        tuple['id'].rjust(3),
        tuple['created_on'].rjust(10),
        tuple['amount'].rjust(12),
        tuple['memo']
        ]
      puts columns.join(" | ")
    end
  end

  def add_expense(amount, memo, date="NOW()")
    if amount.nil? || memo.nil?
      puts "You must provide an amount and memo."
    else
      @connection.exec_params("INSERT INTO expenses (amount, memo, created_on)
      VALUES ($1, $2, $3)", [amount, memo, date])
    end
    puts "Expense successfully added."
  end

end

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def run(arguments)
    command = arguments.first

    if command == "list"
      @expense_data.list_expenses
    elsif command == "add"
      @expense_data.add_expense(arguments[1], arguments[2], arguments[3]="NOW()")
    else
      display_help_content
    end
  end

  def display_help_content
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field

      HELP
  end

end

cli = CLI.new
cli.run(ARGV)
