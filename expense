#! /usr/bin/env ruby
require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    total = @connection.exec("SELECT sum(amount) FROM expenses;")
    display_results(result)
  end

  def add_expense(amount, memo, date="NOW()")
    if amount.nil? || memo.nil?
      puts "You must provide an amount and memo."
    else
      @connection.exec_params("INSERT INTO expenses (amount, memo, created_on)
      VALUES ($1, $2, $3)", [amount, memo, date])
    end
    puts "Expense successfully added."
  end

  def search_expenses(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{search_term}%"])
    display_results(result)
  end

  def count_expenses(result)
    result.values.size
  end

  def display_results(result)
    n = result.values.size

    if n == 0
      puts "There are no expenses."
    else
      puts "There are #{n} expenses."
      count_expenses(result)
        result.each do |tuple|
          columns = [
            tuple['id'].rjust(3),
            tuple['created_on'].rjust(10),
            tuple['amount'].rjust(12),
            tuple['memo']
            ]
          puts columns.join(" | ")
        end
      total = result.map { |tuple| tuple['amount'].to_f}.sum
      puts "----------------------------------------"
      puts "Total = #{total.to_s.rjust(23)}"
    end
  end

  def delete(index)
    result = @connection.exec_params("SELECT * FROM expenses WHERE id = $1;", [index])

    if result.values.size == 0
      puts "There is no expense with id #{index}."
    else
      sql = "DELETE FROM expenses WHERE id = $1;"
      @connection.exec_params(sql, ["#{index}"])
      puts "The following expense has been deleted:"
      display_results(result)
    end
  end

  def clear_expenses
    puts "Are you sure you want to remove all expenses from list? (y/n)"
    response = $stdin.getch
    if response == "y"
      sql = "DELETE FROM expenses;"
      @connection.exec(sql)
      puts "All expenses have been deleted."
    end
  end

end

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def run(arguments)
    command = arguments.first
    case command
    when "list"
      @expense_data.list_expenses
    when "add"
      @expense_data.add_expense(arguments[1], arguments[2], arguments[3]="NOW()")
    when "search"
      @expense_data.search_expenses(arguments[1])
    when "delete"
      @expense_data.delete(arguments[1])
    when "clear"
      @expense_data.clear_expenses
    else
      display_help_content
    end
  end

  def display_help_content
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field

      HELP
  end

end

cli = CLI.new
cli.run(ARGV)
